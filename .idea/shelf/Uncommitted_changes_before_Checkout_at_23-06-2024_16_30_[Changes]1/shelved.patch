Index: src/Dibujos/PanelesMovibles/Decision/DibujoDecisionInicio.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Dibujos.PanelesMovibles.Decision;\r\n\r\nimport Dibujos.PanelPersonalizado;\r\nimport Dibujos.Ventana.VentanaEmergente;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.MouseAdapter;\r\nimport java.awt.event.MouseEvent;\r\nimport java.util.List;\r\n\r\npublic class DibujoDecisionInicio extends PanelPersonalizado {\r\n    public DibujoDecisionInicio(String texto, List<PanelPersonalizado> lista, JPanel _contenedor,GridBagConstraints _restriciones, VentanaEmergente _ventanaEmergente) {\r\n        super(texto, lista, _contenedor,_restriciones,_ventanaEmergente);\r\n\r\n        addMouseListener(new MouseAdapter()\r\n        {\r\n\r\n            @Override\r\n            public void mouseClicked(MouseEvent e) {\r\n                super.mouseClicked(e);\r\n                if (e.getClickCount() == 2) { // Doble clic para editar el texto\r\n                    String nuevoTexto = JOptionPane.showInputDialog(null, \"Editar texto:\", texto);\r\n                    if (nuevoTexto != null && !nuevoTexto.isEmpty()) {\r\n                        cambiarTexto(nuevoTexto); // Actualizar el texto de la figura\r\n                    }\r\n                }\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n\r\n        int widthTx  = this.anchoAlto[0];\r\n        int heightTx = this.anchoAlto[1];\r\n\r\n        int panelWidth  = getWidth();\r\n        int panelHeight = getHeight();\r\n\r\n\r\n        int centro_x = panelWidth/2;  // Centro horizontal\r\n        int centro_y = panelHeight/2; // Centro vertical\r\n\r\n\r\n        int cuarto_x = panelWidth/4;\r\n\r\n        double anguloY = Math.PI / 6;\r\n        double anguloX = Math.PI - anguloY;\r\n\r\n        double z1 = Math.sqrt( (widthTx*widthTx)   / (2 - (2 * Math.cos( anguloX ) ) ) );\r\n        double z2 = Math.sqrt( (heightTx*heightTx) / (2 - (2 * Math.cos( anguloY ) ) ) );\r\n\r\n        double z = z1+z2;\r\n\r\n        int deltX = (int) (z * Math.cos( anguloY / 2));\r\n        int deltY = (int) (z * Math.sin( anguloY / 2));\r\n\r\n\r\n        // Coordenadas del rombo\r\n        int x1 = centro_x - deltX; // Coordenada x del lado izquierdo del rectángulo\r\n        int x2 = centro_x + deltX; // Coordenada x del lado derecho del rectángulo\r\n        int y1 = centro_y - deltY; // Coordenada y del lado superior del rectángulo\r\n        int y2 = centro_y + deltY; // Coordenada y del lado inferior del rectángulo\r\n\r\n\r\n\r\n        // Dibujar las líneas que forman el rombo\r\n        g.setColor(Color.BLACK);\r\n        g.drawLine(x1, centro_y,centro_x, y1);     // Lado superior\r\n        g.drawLine(x2, centro_y,centro_x, y1);     // Lado derecho\r\n        g.drawLine(x1, centro_y,centro_x, y2);     // Lado inferior\r\n        g.drawLine(x2, centro_y,centro_x, y2);     // Lado izquierdo\r\n\r\n        // Dibujar flujo\r\n        g.setColor(Color.BLACK);\r\n        g.drawLine(centro_x,0,centro_x,y1);  // Linea superior\r\n\r\n        g.drawLine(centro_x,y1,centro_x,y1);   // Flecha\r\n        g.drawLine(centro_x,y1,centro_x,y1);   // de flujo\r\n\r\n        g.drawLine(x1,centro_y,cuarto_x,centro_y);\r\n        g.drawLine(x2,centro_y,cuarto_x*3,centro_y);\r\n        g.drawLine(cuarto_x,centro_y,cuarto_x,panelHeight);\r\n        g.drawLine(cuarto_x*3,centro_y,cuarto_x*3,panelHeight);\r\n\r\n        // fuente con el tamaño especificado\r\n        g.setFont(textoFont);\r\n\r\n        // Dibuja el texto centrado\r\n        FontMetrics metrics = g.getFontMetrics();\r\n        int x = (getWidth() - metrics.stringWidth(texto)) / 2;\r\n        int y = ((getHeight() - metrics.getHeight()) / 2) + metrics.getAscent();\r\n        g.drawString(texto, x, y);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Dibujos/PanelesMovibles/Decision/DibujoDecisionInicio.java b/src/Dibujos/PanelesMovibles/Decision/DibujoDecisionInicio.java
--- a/src/Dibujos/PanelesMovibles/Decision/DibujoDecisionInicio.java	
+++ b/src/Dibujos/PanelesMovibles/Decision/DibujoDecisionInicio.java	
@@ -99,3 +99,4 @@
         g.drawString(texto, x, y);
     }
 }
+
Index: src/Dibujos/PanelesMovibles/Decision/DibujoDecisionInterno.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Dibujos.PanelesMovibles.Decision;\r\n\r\nimport Dibujos.PanelPersonalizado;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class DibujoDecisionInterno extends JPanel {\r\n\r\n    private final DesicionInterna verdadero;\r\n    private final DesicionInterna falso;\r\n\r\n    public DibujoDecisionInterno()\r\n    {\r\n        setPreferredSize(new Dimension(200, 400));\r\n        this.setLayout(new BoxLayout(DibujoDecisionInterno.this, BoxLayout.X_AXIS));\r\n        this.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));\r\n\r\n        this.verdadero = new DesicionInterna();\r\n        this.falso = new DesicionInterna();\r\n\r\n        this.verdadero.setLayout(new BoxLayout(this.verdadero, BoxLayout.Y_AXIS));\r\n        this.verdadero.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));\r\n        this.verdadero.add(new DesicionVacia(\"null\",null,null,null,null));\r\n\r\n\r\n        this.falso.setLayout(new BoxLayout(this.falso, BoxLayout.Y_AXIS));\r\n        this.falso.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));\r\n        this.falso.add(new DesicionVacia(\"null\",null,null,null,null));\r\n\r\n        this.add(verdadero);\r\n        this.add(falso);\r\n    }\r\n\r\n\r\n    public JPanel getVerdadero() {\r\n        return verdadero;\r\n    }\r\n\r\n    public List<PanelPersonalizado> getListaVerdadera()\r\n    {\r\n        return verdadero.getListaFiguras();\r\n    }\r\n\r\n    public List<PanelPersonalizado> getListaFalsa()\r\n    {\r\n        return falso.getListaFiguras();\r\n    }\r\n\r\n    public JPanel getFalso() {\r\n        return falso;\r\n    }\r\n\r\n    public void ajustarSize()\r\n    {\r\n\r\n        int alturaVer = 0;\r\n        int alturaFal = 0;\r\n\r\n        int anchoVer  = 0;\r\n        int anchoFal  = 0;\r\n\r\n        JPanel panelVer = this.getVerdadero();\r\n        JPanel panelFal = this.getFalso();\r\n\r\n\r\n\r\n        for (JPanel componete: this.getListaVerdadera())\r\n        {\r\n\r\n            alturaVer += (int) componete.getPreferredSize().getHeight();\r\n            anchoVer   = Math.max( anchoVer , (int) componete.getPreferredSize().getWidth() );\r\n\r\n        }\r\n\r\n\r\n        for (JPanel componete: this.getListaFalsa())\r\n        {\r\n\r\n            alturaFal += (int) componete.getPreferredSize().getHeight();\r\n            anchoFal   = Math.max( anchoFal , (int) componete.getPreferredSize().getWidth() );\r\n\r\n        }\r\n\r\n\r\n\r\n        int altura = Math.max(alturaVer, alturaFal);\r\n        int ancho = Math.max(anchoVer,anchoFal);\r\n\r\n        Dimension size = new Dimension(ancho,altura);\r\n\r\n        panelVer.setPreferredSize(size);\r\n        panelFal.setPreferredSize(size);\r\n\r\n        panelVer.revalidate();\r\n        panelFal.revalidate();\r\n\r\n\r\n        Dimension sizeG = new Dimension(ancho * 2 , altura );\r\n\r\n        this.setPreferredSize(sizeG);\r\n        this.revalidate();\r\n    }\r\n\r\n\r\n    public class DesicionInterna extends JPanel {\r\n        private final List<PanelPersonalizado> listaFiguras;\r\n\r\n        DesicionInterna() {\r\n            listaFiguras = new ArrayList<>();\r\n        }\r\n\r\n        @Override\r\n        protected void paintComponent(Graphics g) {\r\n            super.paintComponent(g);\r\n\r\n            g.setColor(Color.BLACK);\r\n\r\n            int ancho = this.getWidth();\r\n            int alto = this.getHeight();\r\n\r\n            g.drawLine(ancho / 2, 0, ancho / 2, alto);\r\n        }\r\n\r\n\r\n\r\n        public List<PanelPersonalizado> getListaFiguras()\r\n        {\r\n            return listaFiguras;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Dibujos/PanelesMovibles/Decision/DibujoDecisionInterno.java b/src/Dibujos/PanelesMovibles/Decision/DibujoDecisionInterno.java
--- a/src/Dibujos/PanelesMovibles/Decision/DibujoDecisionInterno.java	
+++ b/src/Dibujos/PanelesMovibles/Decision/DibujoDecisionInterno.java	
@@ -124,8 +124,6 @@
             g.drawLine(ancho / 2, 0, ancho / 2, alto);
         }
 
-
-
         public List<PanelPersonalizado> getListaFiguras()
         {
             return listaFiguras;
